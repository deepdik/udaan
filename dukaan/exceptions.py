import math
from six import string_types

from django.utils.encoding import force_text
from django.utils.translation import ugettext_lazy as _
from django.utils.translation import ungettext

from rest_framework import status, exceptions
from rest_framework.views import exception_handler
from rest_framework.exceptions import APIException


def get_from_data(data):
    errors = []

    if type(data) == dict:
        for key, value in data.items():
            value_list = get_from_data(value)
            errors.append("%s: %s" %(key, " ".join(value_list)))

    elif type(data) == list:
        value_list = []
        for d in data:
            value_list += get_from_data(d)
        return value_list

    elif type(data) == str:
        data = [str(data)]
        return data

    elif type(data) == exceptions.ErrorDetail:
        data = [str(data)]
        return data

    return errors


def custom_exception_handler(exc, context):
    """
    Note that the exception handler will only be called for responses generated by raised exceptions. It will not be used for any responses returned directly by the view, such as the HTTP_400_BAD_REQUEST responses that are returned by the generic views when serializer validation fails.
    """
    # Call REST framework's default exception handler first,
    # to get the standard error response.
    response = exception_handler(exc, context)
    if response is not None:
        response_data = dict()
        for data in response.data.items():
            try:
                field, msg = data
                if field in ['non_field_errors', 'error_msg']:
                    try:
                        error_msg = msg[0]
                    except IndexError:
                        error_msg = msg
                elif isinstance(msg, string_types):
                    error_msg = msg
                elif field in ["dependencies"]:
                    response_data.update({field:msg})
                    error_msg = msg
                else:
                    field = field.replace('_', ' ')
                    error_msg = msg[0].replace('This', field)

            except Exception as e:
                error_msg = msg

        response_data.update({"detail": error_msg})
        response.data = response_data

        response.data['status_code'] = response.status_code
    return response


class UserRegisteredError(APIException):
    status_code = status.HTTP_409_CONFLICT
    default_detail = 'The user has already signed up.'
